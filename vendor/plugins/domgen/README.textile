h1. Domgen

A generator that can produce several persistent object artifacts from a common schema definition.

Currently supported output formats are:

* ActiveRecord (Ruby on Rails)
* Plain Ruby classes
* JPA/Hibernate Beans (Java)
* Plain Javabeans (Java)
* SQL DDL (MS-SQL Specific)

h1. Schema Definition

The common schema is defined in a common file, @schema_set.rb@. 

h2. Example:

bc.. 
 1.  Domgen.define_schema_set(:myapp) do |ss|
 2.     ss.define_generator(:sql) 
 3.
 4.     ss.define_schema("Core") do |s| 
 5.       s.sql.schema = 'dbo'
 6.       s.java.package = 'my.application.model'
 7.
 8.       s.define_generator(:jpa)
 9.       s.define_generator(:active_record)
10.
11.       s.define_object_type(:User) do |t|
12.         t.integer(:ID, :primary_key => true)
13.         t.string(:Login, 20, :unique => true, :allow_nil => false, :allow_blank => false)
14.         t.string(:Nickname, 1..30, :unique => true)
15.         t.string(:Signature, 255)
16.       end
17.
18.       s.define_object_type(:Post) do |t|
19.         t.integer(:ID, :primary_key => true)
20.         t.reference(:User, :name => :PostedBy, :inverse_traversable => false)
21.         t.string(:Subject, 1..50, :allow_blank => false)
22.         t.datetime(:PostedAt)
23.         t.boolean(:StickyPost)
24.         t.text(:Content, :allow_nil => true)
25.
26.         t.sql.index([:PostedAt])
27.       end
28.    
29.       s.define_object_type(:Comment) do |t|
30.         t.integer(:ID, :primary_key => true)
31.         t.reference(:Post, :immutable => true, :inverse_multiplicity => :one)
32.         t.reference(:User, :name => :PostedBy, :inverse_traversable => false)
33.         t.text(:Content, :allow_nil => true)
34.      end
35.
36.     end
37.  end

h3. Example Explanation

-  @Domgen.define_schema_set(:myapp) do |ss|@  (Line 1) := Defines the schema set.

-  @ss.define_generator(:sql)@  (Line 2) := Tells domgen to create schema SQL DDL files for this schema set.

-  @ss.define_schema("Core") do |s|@  (Line 4) := Defines a schema inside the schema set. in this case, called @Core@.

-  @s.sql.schema = 'dbo'@  (Line 5) := Defines the database schema for this schema.

-  @s.java.package = 'my.application.model'@  (Line 6) := Defines the java package in which to generate java model classes.

-  @s.define_generator(:jpa)@  (Line 8) := Tells domgen to generate JPA beans.

-  @s.define_generator(:active_record)@  (Line 9) := Tells domgen to generate ActiveRecord model classes.

-  @s.define_object_type(:User) do |t|@  (Line 11) := Defines a @User@ table and corresponding model object.

-  @t.integer(:ID, :primary_key => true)@  (Line 12) := Column/field definition for the primary key.

-  @t.string(:Login, 20, :unique => true, :allow_nil => false, :allow_blank => false)@  (Line 13) := Column/field definition for a string type, with a max length of 20, disallowing @NULL@, blank values (i.e. length less than 1) and must be unique.

-  @t.string(:Nickname, 1..30, :unique => true)@  (Line 14) := Another string column. The @1..30@ defines the minimum and maximum lengths. A minumum of more than zero implies @:allow_blank => false@.

-  @t.reference(:User, :name => :PostedBy, :inverse_traversable => false)@  (Line 20) := A reference to another object, in this case, back to @User@. The @:inverse_traversable => false@ indicated that the inverse relationship _back_ to @Post@ will _not_ be created on the @User@ class. @:name => :PostedBy@ gives a custom name to both the model field and the database column.

- @t.sql.index[:PostedAt]@ (Line 26) := Creates an SQL index on that column.

- @t.reference(:Post, :immutable => true, :inverse_multiplicity => :many)@ (Line 31) := A relationship from @Comment@ to @Post@. The @:inverse_relationship => :has_many@ creates a collection model association from @Post@ to @Comment@, i.e _Posts have many comments_ .
