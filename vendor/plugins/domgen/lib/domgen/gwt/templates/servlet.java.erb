/* DO NOT EDIT: File is auto-generated */
package <%= service.data_module.gwt.server_servlet_package %>;

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.servlet.annotation.WebServlet( name = "<%= service.data_module.name %>.<%= service.gwt.servlet_name %>", urlPatterns = { "/<%= service.data_module.repository.gwt.module_name %>/" + <%= service.gwt.qualified_service_name %>.PATH } )
public class <%= service.gwt.servlet_name %>
  extends com.google.gwt.user.server.rpc.<%= service.gwt.xsrf_protected? ? "XsrfProtectedServiceServlet" : "RemoteServiceServlet" %>
  implements <%= service.gwt.qualified_service_name %>
{
  public static final long serialVersionUID = 1;

  private transient final org.codehaus.jackson.map.ObjectMapper _jsonMapper = new org.codehaus.jackson.map.ObjectMapper();

  @javax.ejb.EJB
  private transient <%= service.ejb.generate_boundary? ? service.ejb.qualified_boundary_interface_name : service.ejb.qualified_service_name %> _service;

<% service.methods.select{|method| method.gwt?}.each do |method|
%>  public <%= annotated_type(method.return_value, :gwt, :transport) %> <%= method.gwt.name %>(<%= method.parameters.select{|parameter| !parameter.gwt.environmental?}.collect{|p| "#{annotated_type(p, :gwt, :transport)} #{p.gwt.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.gwt.qualified_name}.join(', ')}"
%>
  {
<% method.parameters.select{|p|!p.collection? && p.struct?}.each do |parameter| %>
    final <%= parameter.referenced_struct.ee.qualified_name %> $<%= parameter.name %>;
<% end %>
<% method.parameters.select{|p|p.collection? && (p.date? || p.enumeration?|| p.struct?)}.each do |parameter| %>
    final <%= annotated_type(parameter, :ejb, :boundary) %> $<%= parameter.name %>;
<% end %>
<% if method.parameters.any?{|p| p.struct?}
%>  try
  {
<% end %>
<%
   return_prefix = ''
   return_postfix = ''
   if method.return_value.return_type != :void
     return_prefix = "final #{annotated_type(method.return_value, :ejb, :boundary)} returnValue = "
     transform = nil
     if method.return_value.date?
       transform = "org.realityforge.replicant.client.RDate.fromDate( returnValue )"
     elsif method.return_value.enumeration?
       if method.return_value.enumeration.numeric_values?
         transform = "returnValue.ordinal()"
       else
         transform = "returnValue.name()"
       end
     elsif method.return_value.struct?
       transform = "_jsonMapper.writeValueAsString( returnValue )"
     end

     if !method.return_value.collection?
       if method.return_value.nullable? && transform
         transform = "(null == returnValue ? null : #{transform})"
       end
       return_postfix = "return #{transform || "returnValue"};"
     elsif method.return_value.date? || method.return_value.enumeration? || method.return_value.struct?
       return_postfix = ""
       return_postfix << "final #{annotated_type(method.return_value, :ejb, :transport)} $returnValue = #{method.return_value.nullable? ? "null == returnValue ? null : " : '' }new java.util.#{method.return_value.collection_type == :set ? "HashSet" : "ArrayList" }<#{method.return_value.ejb.java_component_type(:transport) }>();\n"
       return_postfix << "  if( null != returnValue )\n    {\n" if method.return_value.nullable?
       return_postfix << <<LOOP
    for( final #{method.return_value.ejb.java_component_type(:boundary) } k: returnValue )
    {
      $returnValue.add(
LOOP
         if method.return_value.date?
           return_postfix << "org.realityforge.replicant.client.RDate.fromDate( k )"
         elsif method.return_value.struct?
           return_postfix << "_jsonMapper.writeValueAsString( k )"
         elsif method.return_value.enumeration.numeric_values?
           return_postfix << "k.ordinal()"
         elsif method.return_value.enumeration.textual_values?
           return_postfix << "k.name()"
         end
         return_postfix << ");\n    }\n"
         return_postfix << "    }\n" if method.return_value.nullable?
         return_postfix << "return $returnValue;\n"
       else
         return_postfix = "return returnValue;"
       end
       if method.return_value.struct?
         return_postfix = "try {\n #{return_postfix} \n} catch ( final java.io.IOException ioe ) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }"
       end
   end
%>
<% method.parameters.select{|p|p.struct? && !p.collection?}.each do |parameter| %>
    $<%= parameter.name %> = _jsonMapper.readValue( <%= parameter.name %>, <%= parameter.ejb.java_type %>.class );
<% end %>
<% method.parameters.select{|p|p.collection? && (p.date? || p.enumeration?|| p.struct?)}.each do |parameter| %>
    $<%= parameter.name %> = <%= parameter.nullable? ? "null == #{parameter.name} ? null : " : '' %>new java.util.<%=  parameter.collection_type == :set ? "HashSet" : "ArrayList" %><<%= parameter.ejb.java_component_type(:boundary) %>>();
    <% if parameter.nullable? %>if( null != <%= parameter.name %> ) {<% end %>
    for( final <%= parameter.ejb.java_component_type(:transport) %> k: <%= parameter.name %> )
    {
    <%
       param_value =
         if parameter.date?
           "org.realityforge.replicant.client.RDate.toDate( k )"
         elsif parameter.enumeration?
           parameter.enumeration.numeric_values? ?
             "#{parameter.enumeration.ee.qualified_name}.values()[ k ]" :
             "#{parameter.enumeration.ee.qualified_name}.valueOf( k )"
         else
           "_jsonMapper.readValue( k, #{parameter.ejb.java_component_type}.class )"
         end
    %>
    $<%= parameter.name %>.add( <%= param_value %> );
    }
    <% if parameter.nullable? %>}<% end %>
<% end %>
<% if method.parameters.any?{|p| p.struct?}
%>    }
    catch ( final java.io.IOException ioe )
    {
      throw new IllegalArgumentException( ioe.getMessage(), ioe );
    }
<% end %>
<% if !method.exceptions.empty?
%>    try
    {
<% end %>
    <%= return_prefix %>_service.<%= method.gwt.name %>(<%= method.parameters.collect do |p|
  if p.gwt.environmental?
    value = p.gwt.environment_value
  elsif p.struct? || (p.collection? && (p.date? || p.enumeration?|| p.struct?))
    value = "$#{p.name}"
  else
    transform = nil
    if p.date?
      transform = "org.realityforge.replicant.client.RDate.toDate( #{p.gwt.name} )"
    elsif p.enumeration?
      if p.enumeration.numeric_values?
        transform = "#{p.enumeration.ee.qualified_name}.values()[ #{p.gwt.name} ]"
      else
        transform = "#{p.enumeration.ee.qualified_name}.valueOf( #{p.gwt.name} )"
      end
    end
    if p.nullable? && transform
      transform = "(null == #{p.gwt.name} ? null : #{transform})"
    end
    value = transform || p.gwt.name
  end
  value
end.join(', ') %>);
  <%= return_postfix %>
<% if !method.exceptions.empty?
%>    }
<% end %>
<% method.exceptions.each do |exception| %>
    catch ( final <%= exception.ee.qualified_name %> e )
    {
        throw new <%= exception.gwt.qualified_name %>( e.getMessage() );
    }
<% end %>
  }
<% end %>}
